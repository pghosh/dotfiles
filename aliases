# Todo
alias todo='$EDITOR ~/.todo'

# Unix
alias tlf="tail -f"
alias ln='ln -v'
alias mkdir='mkdir -p'
alias ...='../..'
alias l='ls'
alias ll='ls -al'
alias lh='ls -Alh'
alias -g G='| grep'
alias -g M='| less'
alias -g L='| wc -l'
alias -g ONE="| awk '{ print \$1}'"

# git
alias g="git"
alias gci="git pull --rebase && rake && git push"

# Bundler
alias b="bundle"
alias be="bundle exec"
alias bake="bundle exec rake"

# Tests and Specs
alias t="ruby -I test"
alias s="bundle exec rspec"
alias cuc="bundle exec cucumber"

# Rubygems
alias gi="gem install"
alias giv="gem install -v"

# Rails
alias migrate="bundle exec rake db:migrate db:test:prepare"
alias remigrate="bundle exec rake db:migrate db:migrate:redo db:schema:dump db:test:prepare"
alias remongrate="bundle exec rake mongoid:migrate mongoid:migrate:redo"

# Heroku staging
alias staging='heroku run console --remote staging'
alias staging-name='echo `basename $PWD`-staging'
alias staging-process='watch heroku ps --remote staging'
alias staging-releases='heroku releases --remote staging'
alias staging-tail='heroku logs --tail --remote staging'

# Heroku production
alias production='heroku run console --remote production'
alias production-name='echo `basename $PWD`-production'
alias production-process='watch heroku ps --remote production'
alias production-releases='heroku releases --remote production'
alias production-tail='heroku logs --tail --remote production'

# Heroku databases
alias db-pull-staging='heroku db:pull --remote staging --confirm `staging-name`'
alias db-pull-production='heroku db:pull --remote production --confirm `production-name`'
alias db-copy-production-to-staging='heroku pgbackups:restore DATABASE `heroku pgbackups:url --app production-name` --app `staging-name` --confirm `staging-name`'
alias db-backup-production='heroku pgbackups:capture --remote production'

# Network
alias whats-my-ip="curl -s checkip.dyndns.org | grep -Eo '[0-9\.]+'"

# Maven
alias mc="mvn clean"
alias mcpi="mvn clean package install"

get() {
url=http://local.slidev.org:8080/api/rest/v1$2
token=`mongo --quiet sli --eval 'db.userSession.find({"body.principal.externalId":"'$1'"})[0].body.appSession[0].token'`
response=`curl -s -H "Content-type: application/json" -H "accept: application/json" -H "Authorization: bearer $token" $url`
echo $response | python -mjson.tool
}

#jenkins run
alias jenkins='java -jar /usr/local/Cellar/jenkins/1.464/libexec/jenkins.war --httpPort=9000'

#set veriable
SLI_HOME=/Users/pghosh/codebase/sli/sli

shard() {
  if [ -z $1 ] 
  then
    echo "No argument specified"
    exit
  fi
  if [ $1 = "start" ]
  then
    echo "Sharding..."
    cd ~/mongo/shard
    sh $SLI_HOME/config/scripts/sharding/start-shard.sh
    mongo sli < $SLI_HOME/config/indexes/sli_indexes.js
    mongo sli < $SLI_HOME/config/shards/sli_shard_indexes.js
    mongo admin < $SLI_HOME/config/shards/sli_shards.js
  elif [ $1 = "kill" ]
  then
    echo "Killing shards..."
    cd ~/mongo/shard
    sh $SLI/config/scripts/sharding/kill-shard.sh
    if [[ ! -z $2 ]] && [[ $2 = "clear" ]]
    then
      echo "Removing everything..."
      rm -rf ~/mongo/shard/*
    fi
  elif [ $1 = "is" ]
  then
    echo "Indexing IS..."
    mongo is $SLI_HOME/config/indexes/is_indexes.js
  fi
}
alias kill-jetty="ps -ef|grep jetty|grep -v grep|awk '{print $2}'|xargs kill -9"
